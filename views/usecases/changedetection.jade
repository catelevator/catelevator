.bg11
    script(src="/js/fabric.min.js")
    //- br 
    //- .templateDescription.text-muted Interact with this template by circling the difference between the two photos.
    //- hr

    #yesnoChange
      .container.text.center
        br
        .text-center
          h4 While signed in, users would be given the next item in the dataset
          p Please continue to explore other templates
      hr

    #firstChange
      .container-fluid
        br
        .panel.panel-default
          .panel-heading.exampleheading
            .templateDescription.text-muted Interact with this template by circling the difference between the two photos.

          .panel-body
            .col-md-3
              .row
                h4 Circle the difference in the photos
                
                a.btn.btn-default.button-flat.btn-superbig.btn-block.yesnobtnChange
                  b Submit
                a.btn.btn-default.button-flat.btn-superbig.btn-block.yesnobtnChange 
                  b Not Found
                a.btn.btn-default.button-flat.btn-superbig.btn-block.clearbtnChange
                  b Clear canvas
                a.btn.btn-default.button-flat.btn-superbig.btn-block.skipbtnChange  
                  b Next Template

            .col-md-4.col-md-offset-1#can1
              br
              canvas(id='mycanvas1', width="500", height="300", style="border:1px solid #000000;")
            .col-md-4#can2
              br
              canvas(id='mycanvas2', width="500", height="300", style="border:1px solid #000000;")
      

          
          br

          
script.
  $('#yesnoChange').hide();
  $('#skipChange').hide();


  function FeatureCanvas2(ops){
        for(op in ops)
          this[op]= ops[op]

        this.canvas = new fabric.Canvas('mycanvas1');
        this.canvas2 = new fabric.Canvas('mycanvas2');
        this.canvas.selection = false;
        this.canvas.circles = [];
        this.canvas.scale_factor = [];
        this.canvas2.selection = false;
        this.canvas2.circles = [];
        this.canvas2.scale_factor = [];


      //FOR CANVAS ON LEFT
      /**
       * Sets up circle drawing for the canvas.
       * Listens for mouse events, draws a circle continuously
       * when mouse is down, stops and saves when mouse comes back up,
       * the circle here is what is submitted to the model. But that happens later.
       */

        // declaring vars before you set them makes programs happy.
        var circle, circles, isDown, origX, origY;

        // Listens for mouse down on canvas, draws a circle
        this.canvas.on('mouse:down', function(o){
          isDown = true;
          var pointer = featureCanvases.canvas.getPointer(o.e);
          origX = pointer.x;
          origY = pointer.y;
          circle = new fabric.Circle({
            left: pointer.x,
            top: pointer.y,
            fill: 'rgba(10,20,60,0.3)',
            radius: 1,
            strokeWidth: 3,
            stroke: 'rgba(40,255,90,1)',
            selectable: false,
            originX: 'center', originY: 'center'
          });
          // add the circle to our array.
          featureCanvases.canvas.add(circle);
          featureCanvases.canvas2.add(circle);
        });

        /**
         * Resizes the circle as the mouse moves.
         * @param  {Event} o 
         */
        
        this.canvas.on('mouse:move', function(o){
          if (!isDown) return;
          var pointer = featureCanvases.canvas.getPointer(o.e);
          circle.set({ radius: Math.abs(origX - pointer.x) });
          featureCanvases.canvas.renderAll();
          featureCanvases.canvas2.renderAll();
        });

        /**
         * Saves the circle when user is done drawing.
         */

        this.canvas.on('mouse:up', function(o){
          var scaled_circle= {
            type: 'circle',
            originX: 'center',
            originY: 'center',
            left: circle.left*featureCanvases.scale_factor,
            top:circle.top*featureCanvases.scale_factor,
            width:circle.width*featureCanvases.scale_factor,
            height: circle.height*featureCanvases.scale_factor,
            fill: 'rgba(10,20,60,0.3)',
            stroke: 'rgba(40,255,90,1)',
            strokeWidth: 3,
            strokeDashArray: null,
            strokeLineCap: 'butt',
            strokeLineJoin: 'miter',
            strokeMiterLimit: 10,
            angle: 0,
            flipX: false,
            flipY: false,
            opacity: 1,
            shadow: null,
            visible: true,
            clipTo: null,
            backgroundColor: '',
            fillRule: 'nonzero',
            globalCompositeOperation: 'source-over',
            radius: circle.radius,
            startAngle: circle.startAngle,
            endAngle: circle.endAngle
          }
          featureCanvases.canvas.circles.push(scaled_circle)
          featureCanvases.canvas2.circles.push(scaled_circle)
          isDown = false;
        });



      //FOR CANVAS ON RIGHT
      /**
       * Sets up circle drawing for the canvas.
       * Listens for mouse events, draws a circle continuously
       * when mouse is down, stops and saves when mouse comes back up,
       * the circle here is what is submitted to the model. But that happens later.
       */

        // declaring vars before you set them makes programs happy.
        //- var circle, circles, isDown, origX, origY;

        // Listens for mouse down on canvas, draws a circle
        this.canvas2.on('mouse:down', function(o){
          isDown = true;
          var pointer = featureCanvases.canvas2.getPointer(o.e);
          origX = pointer.x;
          origY = pointer.y;
          circle = new fabric.Circle({
            left: pointer.x,
            top: pointer.y,
            fill: 'rgba(10,20,60,0.3)',
            radius: 1,
            strokeWidth: 3,
            stroke: 'rgba(40,255,90,1)',
            selectable: false,
            originX: 'center', originY: 'center'
          });
          // add the circle to our array.
          featureCanvases.canvas.add(circle);
          featureCanvases.canvas2.add(circle);
        });

        /**
         * Resizes the circle as the mouse moves.
         * @param  {Event} o 
         */
        
        this.canvas2.on('mouse:move', function(o){
          if (!isDown) return;
          var pointer = featureCanvases.canvas2.getPointer(o.e);
          circle.set({ radius: Math.abs(origX - pointer.x) });
          featureCanvases.canvas.renderAll();
          featureCanvases.canvas2.renderAll();
        });

        /**
         * Saves the circle when user is done drawing.
         */

        this.canvas2.on('mouse:up', function(o){
          var scaled_circle= {
            type: 'circle',
            originX: 'center',
            originY: 'center',
            left: circle.left*featureCanvases.scale_factor,
            top:circle.top*featureCanvases.scale_factor,
            width:circle.width*featureCanvases.scale_factor,
            height: circle.height*featureCanvases.scale_factor,
            fill: 'rgba(10,20,60,0.3)',
            stroke: 'rgba(40,255,90,1)',
            strokeWidth: 3,
            strokeDashArray: null,
            strokeLineCap: 'butt',
            strokeLineJoin: 'miter',
            strokeMiterLimit: 10,
            angle: 0,
            flipX: false,
            flipY: false,
            opacity: 1,
            shadow: null,
            visible: true,
            clipTo: null,
            backgroundColor: '',
            fillRule: 'nonzero',
            globalCompositeOperation: 'source-over',
            radius: circle.radius,
            startAngle: circle.startAngle,
            endAngle: circle.endAngle
          }
          featureCanvases.canvas.circles.push(scaled_circle)
          featureCanvases.canvas2.circles.push(scaled_circle)
          isDown = false;
        });

      }

      /**
       * Instantiates a new instance of that Class.
       * @type {FeatureCanvas}
       */
      var featureCanvases = new FeatureCanvas2()
 
      
  $(document).on("click", ".clearbtnChange", function() {
    featureCanvases.canvas.clear();
    featureCanvases.canvas2.clear();
    updateImages();
  });

  $(document).on("click", ".yesnobtnChange", function() {
    $('#skipChange').hide();
    $('#yesnoChange').show();

  });

  $(document).on("click", ".skipbtnChange", function() {
    $('#yesnoChange').hide();
    //- $('#skipChange').show();
    //- document.getElementById("#exampletabs li.active").next().click()
    $('#exampletabs li a[href="#evaluation"]').trigger('click');
    //- $('#changedection').next();
    //- $(this).next();
  });


  function updateImages() {
    fabric.Image.fromURL('images/originalMADS.jpg', function(img) {

          var w = img.width
          var h = img.height
          var cw = $("#can1").width()
          scale_factor = cw/w
          featureCanvases.scale_factor = scale_factor
          var ch = h * scale_factor

          // sets the new w and h for the image
          img.set({width: cw, height: ch, originX: 'left', originY: 'top'});
          // sets the new w and h for the canvas
          featureCanvases.canvas.setWidth(cw);
          featureCanvases.canvas.setHeight(ch);
          // sets the canvas backgrouns as the image and binds the dimensions.
          featureCanvases.canvas.setBackgroundImage( img, 
            featureCanvases.canvas.renderAll.bind(featureCanvases.canvas)
          );
        })

      fabric.Image.fromURL('images/changed.jpg', function(img) {

          var w = img.width
          var h = img.height
          var cw = $("#can2").width()
          scale_factor = cw/w
          featureCanvases.scale_factor = scale_factor
          var ch = h * scale_factor

          // sets the new w and h for the image
          img.set({width: cw, height: ch, originX: 'left', originY: 'top'});
          // sets the new w and h for the canvas
          featureCanvases.canvas2.setWidth(cw);
          featureCanvases.canvas2.setHeight(ch);
          // sets the canvas backgrouns as the image and binds the dimensions.
          featureCanvases.canvas2.setBackgroundImage( img, 
            featureCanvases.canvas2.renderAll.bind(featureCanvases.canvas2)
          );
        })
  }


  $(document).ready(function() {
    $('#yesnoChange').hide();
    $('#skipChange').hide();
    //- featureCanvases.canvas1.setBackgroundImage(cat1);
    //- featureCanvases.canvas2.setBackgroundImage(cat2);
    updateImages();
    
  });


   //- var canvas1 = document.getElementById("mycanvas1");
  //- var cxt1 = canvas1.getContext("2d");
  //- var cat1 = new Image();
  //- cat1.src = "images/originalMADS.jpg";

  //- var canvas2 = document.getElementById("mycanvas2");
  //- var cxt2 = canvas2.getContext("2d");
  //- var cat2 = new Image();
  //- cat2.src = "images/changed.jpg";

  //- var isDrawing1 = false;
  //- var isDrawing2 = false;

  //- cat1.onload = function() {
  //-   cxt1.drawImage(cat1,0,0, 275, 300);
  //- }

  //- cat2.onload = function() {
  //-   cxt2.drawImage(cat2,0,0, 275, 300);
  //- }

  //- var startX;
  //- var startY;
  //- //var startX2;
  //- //var startY2;

  //- canvas1.onmousedown = function(e) {
  //-   e.preventDefault();
  //-   e.stopPropagation();
  //-   var rect1 = canvas1.getBoundingClientRect();
  //-   var offsetX = rect1.left;
  //-   var offsetY = rect1.top;
  //-   //cxt1.beginPath();
  //-   //cxt2.beginPath();
  //-   startX = parseInt(e.clientX - offsetX);
  //-   startY = parseInt(e.clientY - offsetY);
  //-   isDrawing1 = true;
  //-   isDrawing2 = true;
  //-   //cxt1.moveTo(e.clientX - rect1.left, e.clientY - rect1.top);
  //-   //cxt2.moveTo(e.clientX - rect1.left, e.clientY - rect1.top);
  //- };
  //- canvas1.onmousemove = function(e) {
  //-   var rect1 = canvas1.getBoundingClientRect();
  //-   if (isDrawing1 && isDrawing2) {
  //-     var offsetX = rect1.left;
  //-     var offsetY = rect1.top;
  //-     var x = parseInt(e.clientX - offsetX);
  //-     var y = parseInt(e.clientY - offsetY);
  //-     var moveY = startY + (y - startY) / 2;
  //-     cxt1.clearRect(0,0,canvas1.width, canvas1.height);
  //-     cxt1.drawImage(cat1,0,0,275,300);
  //-     cxt1.lineWidth = 2;
  //-     cxt2.clearRect(0,0,canvas2.width, canvas2.height);
  //-     cxt2.drawImage(cat2,0,0,275,300);
  //-     cxt2.lineWidth = 2;

  //-     cxt1.beginPath();
  //-     cxt2.beginPath();

  //-     cxt1.moveTo(startX, moveY);
  //-     cxt1.bezierCurveTo(startX, startY, x, startY, x, moveY);
  //-     cxt1.bezierCurveTo(x, y, startX, y, startX, moveY);

  //-     cxt2.moveTo(startX, moveY);
  //-     cxt2.bezierCurveTo(startX, startY, x, startY, x, moveY);
  //-     cxt2.bezierCurveTo(x, y, startX, y, startX, moveY);

  //-     cxt1.closePath();
  //-     cxt2.closePath();

  //-     cxt1.stroke();
  //-     cxt2.stroke();
  //-   }
  //- };
  //- canvas1.onmouseup = function() {
  //-   isDrawing1 = false;
  //-   isDrawing2 = false;
  //- };

  //- canvas2.onmousedown = function(e) {
  //-   e.preventDefault();
  //-   e.stopPropagation();
  //-   var rect2 = canvas2.getBoundingClientRect();
  //-   var offsetX = rect2.left;
  //-   var offsetY = rect2.top;
  //-   //cxt1.beginPath();
  //-   //cxt2.beginPath();
  //-   startX = parseInt(e.clientX - offsetX);
  //-   startY = parseInt(e.clientY - offsetY);

  //-   isDrawing1 = true;
  //-   isDrawing2 = true;
  //-   //cxt1.moveTo(e.clientX - rect2.left, e.clientY - rect2.top);
  //-   //cxt2.moveTo(e.clientX - rect2.left, e.clientY - rect2.top);
  //- };
  //- canvas2.onmousemove = function(e) {
  //-   var rect2 = canvas2.getBoundingClientRect();
  //-   if (isDrawing1 && isDrawing2) {
  //-     var offsetX = rect2.left;
  //-     var offsetY = rect2.top;
  //-     var x = parseInt(e.clientX - offsetX);
  //-     var y = parseInt(e.clientY - offsetY);
  //-     var moveY = startY + (y - startY) / 2;
  //-     cxt1.clearRect(0,0,canvas1.width, canvas1.height);
  //-     cxt1.drawImage(cat1,0,0,275,300);
  //-     cxt1.lineWidth = 2;
  //-     cxt2.clearRect(0,0,canvas2.width, canvas2.height);
  //-     cxt2.drawImage(cat2,0,0,275,300);
  //-     cxt2.lineWidth = 2;

  //-     cxt1.beginPath();
  //-     cxt2.beginPath();

  //-     cxt1.moveTo(startX, moveY);
  //-     cxt1.bezierCurveTo(startX, startY, x, startY, x, moveY);
  //-     cxt1.bezierCurveTo(x, y, startX, y, startX, moveY);

  //-     cxt2.moveTo(startX, moveY);
  //-     cxt2.bezierCurveTo(startX, startY, x, startY, x, moveY);
  //-     cxt2.bezierCurveTo(x, y, startX, y, startX, moveY);

  //-     cxt1.closePath();
  //-     cxt2.closePath();

  //-     cxt1.stroke();
  //-     cxt2.stroke();
  //-   }
  //- };
  //- canvas2.onmouseup = function() {
  //-   isDrawing1 = false;
  //-   isDrawing2 = false;
  //- };