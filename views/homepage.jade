extends ./layout


block body
  // Default home page
  .container
    br
    include navbar
    .container-fluid
      .text-center
        .row
          .col-sm-6.col-md-offset-3

            br
            br
            br
            h1.bigBrand Cat Elevator
            p.lead A framework for crowd sourcing pattern
              br
              o  recognition with any type of content.
            
            a.btn.btn-default.btn-lg Sign up 


            br
            br
            br
            br
    hr

          


  .container
    .col-sm-4




  .container
    .col-sm-3
      br
      include sidebar
    .col-sm-9
      .panel.panel-default
        .panel-body
       
          a.thumbnail.col-sm-2
              img(src="http://1.bp.blogspot.com/-_1pDGXMyu7Y/UMVqxR13BFI/AAAAAAAAAJw/0ns2PhRiZbY/s320/cat.png")


          .panel-heading
            b Activities
          .panel-body
            table#activityTable.table


      br
      #activityThumbs

  script.

    // An eventemitter tool
    (function(jQuery) {
        jQuery.eventEmitter = {
          _JQInit: function() {
            this._JQ = jQuery(this);
          },
          emit: function(evt, data) {
            !this._JQ && this._JQInit();
            this._JQ.trigger(evt, data);
          },
          once: function(evt, handler) {
            !this._JQ && this._JQInit();
            this._JQ.one(evt, handler);
          },
          on: function(evt, handler) {
            !this._JQ && this._JQInit();
            this._JQ.bind(evt, handler);
          },
          off: function(evt, handler) {
            !this._JQ && this._JQInit();
            this._JQ.unbind(evt, handler);
          }
        };
      }(jQuery));



      function Model() {
        // do stuff
      }
       
      jQuery.extend(Model.prototype, jQuery.eventEmitter);

      // make new instance of Model
      var activityModel = new Model();
       

      // table everything

      // Listen for when things of this model type are created
      activityModel.on('created', function(info,activity) {
        $("#activityTable").append($("<tr/>", {id:activity.id}))
        $.map(activity.data, function(val, attr){
          $("#"+activity.id).append($("<td/>",{id:attr,text:val}))
        })
      });

      // Listen for when things of this model type are updated
      activityModel.on('updated', function(info,activity) {
        var gid = activity.id
        $.map(activity.data, function(val, attr){
          if($("#"+activity.id+" #"+attr).text())
            $("#"+activity.id+" #"+attr).text(val)
          else
            $("#"+activity.id).append($("<td />",{id:attr,text:val}))
        })
      });





      // thumbnails 


      // Listen for when things of this model type are created
      activityModel.on('created', function(info,activity) {

        $("#activityThumbs").append($("<div>", {class:"panel panel-default well-sm ", id:activity.id}))

        $("#activityThumbs "+ "#"+activity.id).append($("<h4>",{id:'name',text:activity.data.name}))
        $("#activityThumbs "+ "#"+activity.id).append($("<p>",{id:'name',text:activity.data.desc}))

        //- $.map(activity.data, function(val, attr){
        //-   $("#activityThumbs "+ "#"+activity.id).append($("<div>",{id:attr,text:val}))
        //- })
      });

      // Listen for when things of this model type are updated
      activityModel.on('updated', function(info,activity) {
        var gid = activity.id
        $.map(activity.data, function(val, attr){
          if($("#"+activity.id+" #"+attr).text())
            $("#"+activity.id+" #"+attr).text(val)
          else
            $("#"+activity.id).append($("<div>",{id:attr,text:val}))
        })
      });



      $(document).ready(function() {

        io.socket.get("/activity",{}, function(activities){
          console.log(activities)
          $.map(activities, function(activity){
            activityModel.emit('created', {id:activity.id,data:activity});
          })
        })

        io.socket.on("activity",function(activity){
            activityModel.emit(activity.verb, activity);
        })

      });


