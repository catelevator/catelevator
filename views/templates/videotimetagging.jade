extends ../layout
block body 
  include ../navbar

  script(src="/js/fabric.min.js")

  .container
    .panel.panel-default
      .panel-heading
        #job
      .panel-body
        .col-md-3
          .row
            if job        
              h4=job.name
              p=job.desc
              #jobid.hide=job.id
              hr

            .row
              .col-sm-8
                input(id="paused", type='text', placeholder='enter time here').form-control
              .col-sm-1
                a.btn.btn-md.btn-warning.clearbtnVideo Clear
            br    

            a.btn.btn-default.button-flat.btn-superbig.btn-block.selectButton 
              b Submit

            a.btn.btn-default.button-flat.btn-superbig.btn-block.selectButton 
              b Not Found

            a.btn.btn-default.button-flat.btn-superbig.btn-block.skipButton 
              b Skip this task

        .col-md-9
            #currentImageContainer.btn-block
            #currentVideo
              #player

  script.

    // wraps it all in a clojure
    (function(){
      var tag = document.createElement('script');
      tag.src = "https://www.youtube.com/iframe_api"
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
      var player;
      /**
       * Sends an image to the main canvas and resizes it appropriately.
       * We set the background image of the canvas -- instead of adding the image
       * itself, so we can't bind the aspect ratio to it globally. So our circles relate
       * to the right pixels on the image.
       */
      function toCanvas(){

        var src = $(this).find('img').attr('vidid')
        var id  = $(this).find('img').attr('data-id')
        $(".featureImage.active").removeClass("active")
        $(this).addClass("active")
        if(player != null) player.destroy();
        document.getElementById("paused").value = '';
        onYouTubeIframeAPIReady(src);

        $("#currentVideo iframe").attr('data-id',id)

      }

      function onYouTubeIframeAPIReady(src) {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
          videoId: src,
          //- 'data-id': id,
          events: {
            'onStateChange': onPlayerStateChange
          }
        });
      }


      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PAUSED) {
          document.getElementById("paused").value = player.getCurrentTime();
        }
      }


      /**
       * Submits whatever stuff you want to submit relating to the user input
       * upon completion of this task. Can retrieve next tasks here too.
       */
      function select(){
        
        var src = $("#currentVideo").find('iframe').attr('src')
        var task_id  = $("#currentVideo").find('iframe').attr('data-id')
        var job_id  = $("#jobid").text()
        var inputbtn = $(this).text()
        var val = document.getElementById("paused").value;
        console.log(val)

        io.socket.post("/actions/new_do", {task_id:task_id,
          job_id:job_id,
          input_type:inputbtn,
          input:val,
          type:"videotimetagging"
        }, function(new_task,info){
            io.socket.get( "/task/find", { job_id:#{job.id}, limit:1, skip:skip++ }, function(tasks){
              $.map(tasks, function(task){
                featureModel.emit('created', {
                  id:task.id,
                  data:task
                })
              })

              $(".featureImage.active").remove();
              $(".featureImage").first().click(); 
            })
          })
      }

      function skipthing() {
        $(".featureImage.active").next().click();
      }

      var featureModel = new $.eventModel();

      featureModel.on('created', function(info,item) {
          var a = item.data
          
            console.log(d)
            $("#job").append($("<span>", {
              "data-id":d.id,
              class:"preview featureImage"
            }).append($("<img>",{
              class:"img-rounded",
              "data-id":d.id,
              "vidid":d.video_id,
              src:"http://img.youtube.com/vi/"+d.video_id+"/default.jpg",
              "vidsrc":d.src
            })))
      });


      featureModel.on('updated', function(info,item) {
          $.map(item.data, function(val, attr){
            if($("#"+item.id+" #"+attr).text())
              $("#"+item.id+" #"+attr).text(val)
            else $("#"+item.id).append($("<div>",{id:attr,text:val}))
          })
      });


      function dataset_glue(model){

        io.socket.on( model, function(dataset){
          featureModel.emit(dataset.verb, dataset);
        })

        io.socket.get( "/task/find", { job_id:#{job.id} , limit:10 }, function(tasks){
          skip = tasks.length
          $.map(tasks, function(task){
            featureModel.emit('created', {
              id:task.id,
              data:task
            })
          $(".featureImage").first().click(); 
          })
        })
      }

      $(document).on( "click", ".featureImage", toCanvas )
      $(document).on( "click", ".selectButton", select )
      $(document).on( "click", ".skipButton", skipthing )

      $(document).ready(function() {

        dataset_glue("task");

      });

    })()
