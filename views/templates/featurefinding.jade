extends ../layout
block body 
  include ../navbar

  script(src="/js/fabric.min.js")

  .container
    .panel.panel-default
      .panel-heading
        #job
      .panel-body
        .col-md-3
          .row
            if job        
              h4=job.name
              p=job.desc
              #jobid.hide=job.id
              hr

            a.btn.btn-default.button-flat.btn-superbig.btn-block.selectButton 
              b Submit

            a.btn.btn-default.button-flat.btn-superbig.btn-block.selectButton 
              b Not Found

            a.btn.btn-default.button-flat.btn-superbig.btn-block.clearbtn 
              b Clear canvas

            a.btn.btn-default.button-flat.btn-superbig.btn-block.selectButton 
              b Skip this task

        .col-md-9
            #currentImageContainer.btn-block
            #currentImage
            #currentCanvas(style="border:1px solid rgba(50,50,150,0.5);")
              canvas#mycanvas

  script.

    // wraps it all in a clojure
    (function(){

      /**
       * Example of a constructor -- the feature canvas. Thought I'd show oop and procedural
       * stuff so you guys can see the fundamental patterns in a variety of ways and continue
       * it however you like.
       * @param {Object} ops options parameters
       */
      function FeatureCanvas(ops){
        for(op in ops)
          this[op]= ops[op]

        this.canvas = new fabric.Canvas('mycanvas');
        this.canvas.selection = false;
        this.canvas.circles = [];
        this.canvas.scale_factor = [];



      /**
       * Sets up circle drawing for the canvas.
       * Listens for mouse events, draws a circle continuously
       * when mouse is down, stops and saves when mouse comes back up,
       * the circle here is what is submitted to the model. But that happens later.
       */

        // declaring vars before you set them makes programs happy.
        var circle, circles, isDown, origX, origY;

        // Listens for mouse down on canvas, draws a circle
        this.canvas.on('mouse:down', function(o){
          isDown = true;
          var pointer = featureCanvas.canvas.getPointer(o.e);
          origX = pointer.x;
          origY = pointer.y;
          circle = new fabric.Circle({
            left: pointer.x,
            top: pointer.y,
            fill: 'rgba(10,20,60,0.3)',
            radius: 1,
            strokeWidth: 3,
            stroke: 'rgba(40,255,90,1)',
            selectable: false,
            originX: 'center', originY: 'center'
          });
          // add the circle to our array.
          featureCanvas.canvas.add(circle);
        });

        /**
         * Resizes the circle as the mouse moves.
         * @param  {Event} o 
         */
        
        this.canvas.on('mouse:move', function(o){
          if (!isDown) return;
          var pointer = featureCanvas.canvas.getPointer(o.e);
          circle.set({ radius: Math.abs(origX - pointer.x) });
          featureCanvas.canvas.renderAll();
        });

        /**
         * Saves the circle when user is done drawing.
         */

        this.canvas.on('mouse:up', function(o){
          var scaled_circle= {
            type: 'circle',
            originX: 'center',
            originY: 'center',
            left: circle.left*featureCanvas.scale_factor,
            top:circle.top*featureCanvas.scale_factor,
            width:circle.width*featureCanvas.scale_factor,
            height: circle.height*featureCanvas.scale_factor,
            fill: 'rgba(10,20,60,0.3)',
            stroke: 'rgba(40,255,90,1)',
            strokeWidth: 3,
            strokeDashArray: null,
            strokeLineCap: 'butt',
            strokeLineJoin: 'miter',
            strokeMiterLimit: 10,
            angle: 0,
            flipX: false,
            flipY: false,
            opacity: 1,
            shadow: null,
            visible: true,
            clipTo: null,
            backgroundColor: '',
            fillRule: 'nonzero',
            globalCompositeOperation: 'source-over',
            radius: circle.radius,
            startAngle: circle.startAngle,
            endAngle: circle.endAngle
          }
          featureCanvas.canvas.circles.push(scaled_circle)
          isDown = false;
        });

      }

      /**
       * Instantiates a new instance of that Class.
       * @type {FeatureCanvas}
       */
      var featureCanvas = new FeatureCanvas()


      /**
       * Sends an image to the main canvas and resizes it appropriately.
       * We set the background image of the canvas -- instead of adding the image
       * itself, so we can't bind the aspect ratio to it globally. So our circles relate
       * to the right pixels on the image.
       */
      function toCanvas(){

        var src = $(this).find('img').attr('src')
        var id  = $(this).find('img').attr('data-id')
        $(".featureImage.active").removeClass("active")
        $(this).addClass("active")

        featureCanvas.canvas.clear()
        featureCanvas.task_id = id;
        /**
         * Creates an image from the src url, scales it appropriately, 
         * then makes it the background image.
         * @param  {Image} img The image object
         * @return {[type]}     [description]
         */
        fabric.Image.fromURL(src, function(img) {

          var w = img.width
          var h = img.height
          var cw = $("#currentImageContainer").width()
          scale_factor = cw/w
          featureCanvas.scale_factor = scale_factor
          var ch = h * scale_factor

          // sets the new w and h for the image
          img.set({width: cw, height: ch, originX: 'left', originY: 'top'});
          // sets the new w and h for the canvas
          featureCanvas.canvas.setWidth(cw);
          featureCanvas.canvas.setHeight(ch);
          // sets the canvas backgrouns as the image and binds the dimensions.
          featureCanvas.canvas.setBackgroundImage( img, 
            featureCanvas.canvas.renderAll.bind(featureCanvas.canvas)
          );
        })
      }

      /**
       * When the window is resized -- we want to also resize the canvas to fit.
       */
      function resizeCanvas() {
          var w = featureCanvas.canvas.width
          var h = featureCanvas.canvas.height
          var cw = $("#currentImageContainer").width()
          scale_factor = cw/w
          var ch = h * scale_factor
          featureCanvas.canvas.setWidth(cw);
          featureCanvas.canvas.setHeight(ch);
          featureCanvas.canvas.renderAll();
      }
      // Adds a listener for canvas resize
      window.addEventListener('resize', resizeCanvas, false);

      // resize on init
      resizeCanvas();


      /**
       * Submits whatever stuff you want to submit relating to the user input
       * upon completion of this task. Can retrieve next tasks here too.
       */
      function select(){
        // Isolates the values we need

        var src =  featureCanvas.canvas.src
        var task_id  = featureCanvas.task_id
        console.log("task_id",task_id)
        var job_id  = $("#jobid").text()
        var val = $(this).text()
        // logs the circles we have.
        console.log( featureCanvas.canvas.circles )
        console.log(src)
        console.log(task_id)
        // Posts this action to the server.
        io.socket.post("/actions/new_do", {
          task_id:task_id,
          job_id:job_id,
          input_type:"circles",
          input:featureCanvas.canvas.circles,
          type:"featurefinding"
        
        },function(new_task,info){
          // Deletes our old circles
          featureCanvas.canvas.circles = []
          // Goes to next task.
          $(".featureImage.active").next().click()
        })
      }



      $(document).on("click", ".clearbtn", clearCanvas)

      function clearCanvas() {
        featureCanvas.canvas.clear()
        $(".featureImage.acive").click();

        //context.drawImage(cat, 0,0,500,300);
      }

      var featureModel = new $.eventModel();

      featureModel.on('created', function(info,item) {
          var a = item.data.tasks
          $.map(a, function(d){
            console.log("asdasdasdasad")
            console.log(d)
            $("#job").append($("<span>", {
              "data-id":d.id,
              class:"small featureImage"
            }).append($("<img>",{
              "data-id":d.id,
                src:d.src
            })))
          })
      });


      featureModel.on('updated', function(info,item) {
          $.map(item.data, function(val, attr){
            if($("#"+item.id+" #"+attr).text())
              $("#"+item.id+" #"+attr).text(val)
            else $("#"+item.id).append($("<div>",{id:attr,text:val}))
          })
      });



      function dataset_glue(model){

          io.socket.on( model, function(dataset){
            featureModel.emit(dataset.verb, dataset);
          })

          io.socket.get( "/"+model+"/find", {type:"featurefinding"}, function(datasets){
            console.log(datasets);
            $.map(datasets, function(dataset){
              featureModel.emit('created', {
                id:dataset.id,
                data:dataset
              })
            })
            $(".featureImage").first().click();
          })
      }

      $(document).on( "click", ".featureImage", toCanvas )
      $(document).on( "click", ".selectButton", select )


      $(document).ready(function() {

        dataset_glue("job");

      });

    })()
